#include <stdio.h>
#include <stdlib.h>

#define MAX_STACK_SIZE 100

// Stack structure
typedef struct {
    int data[MAX_STACK_SIZE];
    int top; // Index of the top element
} Stack;

// Function to initialize an empty stack
Stack* init() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    if (stack == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    stack->top = -1; // Stack is initially empty
    return stack;
}

// Function to check if the stack is empty
int empty(Stack* stack) {
    return (stack->top == -1); // If top is -1, stack is empty
}

// Function to push an element onto the stack
void push(Stack* stack, int value) {
    if (stack->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack->data[++stack->top] = value;
}

// Function to return the top element of the stack
int top(Stack* stack) {
    if (empty(stack)) {
        printf("Stack is empty\n");
        exit(EXIT_FAILURE);
    }
    return stack->data[stack->top];
}

// Function to delete the top element of the stack
void pop(Stack* stack) {
    if (empty(stack)) {
        printf("Stack is empty\n");
        return;
    }
    stack->top--;
}

// Function to deallocate memory used by the stack
void destroy(Stack* stack) {
    free(stack);
}

// Function to print the base 5 representation of an unsigned integer
void printBase5(unsigned int num) {
    if (num == 0) {
        printf("Base 5 representation: 0\n");
        return;
    }
    
    Stack* stack = init(); // Initialize stack

    while (num > 0) {
        int remainder = num % 5;
        push(stack, remainder);
        num /= 5;
    }

    printf("Base 5 representation: ");
    while (!empty(stack)) {
        printf("%d", top(stack));
        pop(stack);
    }
    printf("\n");

    destroy(stack); // Free memory used by the stack
}

int main() {
    unsigned int num;
    printf("Enter a positive integer: ");
    scanf("%u", &num);
    printBase5(num);
    return 0;
}

